@page "/admin/dashboard"
@using Melodee.Common.Plugins.Scrobbling
@using Melodee.Common.Services.Caching
@inherits MelodeeComponentBase

@inject IMelodeeConfigurationFactory MelodeeConfigurationFactory
@inject ICacheManager CacheManager
@inject INowPlayingRepository NowPlayingInMemoryRepository
@inject NotificationService NotificationService

@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Dashboard</PageTitle>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12">
            <RadzenStack
                Orientation="Orientation.Horizontal"
                AlignItems="AlignItems.Center"
                Gap="0.5rem">
                <RadzenButton
                    Icon="sweep"
                    Text="Clear Cache"
                    Click="@ClearCacheClicked"
                    Size="ButtonSize.Small"
                    ButtonStyle="ButtonStyle.Warning"/>
                <RadzenButton
                    Icon="sweep"
                    Text="Clear Now Playing"
                    Click="@ClearNowPlayingClicked"
                    Size="ButtonSize.Small"
                    ButtonStyle="ButtonStyle.Warning"/>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {

    private void ClearCacheClicked()
    {
        CacheManager.Clear();
        MelodeeConfigurationFactory.Reset();
        NotificationService.Notify(NotificationMessageForResult(new OperationResult<bool> { Data = true }, "cleared cache", ToastTime));
    }

    private async Task ClearNowPlayingClicked()
    {
        await NowPlayingInMemoryRepository.ClearNowPlayingAsync();
        NotificationService.Notify(NotificationMessageForResult(new OperationResult<bool> { Data = true }, "cleared now playing", ToastTime));
    }

}
