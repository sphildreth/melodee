@page "/admin/dashboard"
@using Melodee.Common.Plugins.Scrobbling
@using Melodee.Common.Services.Caching
@inherits MelodeeComponentBase

@inject IMelodeeConfigurationFactory MelodeeConfigurationFactory
@inject ICacheManager CacheManager
@inject INowPlayingRepository NowPlayingInMemoryRepository
@inject NotificationService NotificationService

@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Dashboard</PageTitle>

<RadzenStack>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12">
            <RadzenStack
                Orientation="Orientation.Horizontal"
                AlignItems="AlignItems.Center"
                Gap="0.5rem">
                <RadzenButton
                    Icon="sweep"
                    Text="Clear Cache"
                    Click="@ClearCacheClicked"
                    Size="ButtonSize.Small"
                    ButtonStyle="ButtonStyle.Warning"/>
                <RadzenButton
                    Icon="sweep"
                    Text="Clear Now Playing"
                    Click="@ClearNowPlayingClicked"
                    Size="ButtonSize.Small"
                    ButtonStyle="ButtonStyle.Warning"/>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

<RadzenCard Style="margin-top: 1rem;">
    <RadzenText Size="H5">Cache Statistics</RadzenText>
    <RadzenStack Orientation="Orientation.Horizontal" Gap="1rem">
        @if (CacheStatistics != null)
        {
            foreach (var stat in CacheStatistics)
            {
                <RadzenCard Style="min-width: 180px;">
                    <RadzenText Size="H6">@stat.Title</RadzenText>
                    <div style="font-size: 22px; font-weight: bold;">@stat.Data</div>
                </RadzenCard>
            }
        }
        else
        {
            <RadzenProgressBar Mode="ProgressBarMode.Indeterminate" />
        }
    </RadzenStack>
</RadzenCard>

@code {
    private IEnumerable<Statistic>? CacheStatistics;

    protected override void OnInitialized()
    {
        CacheStatistics = CacheManager.CacheStatistics();
    }

    private void ClearCacheClicked()
    {
        CacheManager.Clear();
        MelodeeConfigurationFactory.Reset();
        NotificationService.Notify(NotificationMessageForResult(new OperationResult<bool> { Data = true }, "cleared cache", ToastTime));
    }

    private async Task ClearNowPlayingClicked()
    {
        await NowPlayingInMemoryRepository.ClearNowPlayingAsync();
        NotificationService.Notify(NotificationMessageForResult(new OperationResult<bool> { Data = true }, "cleared now playing", ToastTime));
    }

}
