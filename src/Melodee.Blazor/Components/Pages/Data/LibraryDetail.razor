@page "/data/library/{ApiKey:guid}"
@inherits MelodeeComponentBase
@using Melodee.Blazor.Extensions.Data
@using Melodee.Common.Data.Models.Extensions
@using Melodee.Common.Enums
@using Melodee.Common.Filtering
@using Melodee.Common.Models.Collection
@using Melodee.Common.Services.Scanning
@using FilterOperator = Melodee.Common.Filtering.FilterOperator
@using Library = Melodee.Common.Data.Models.Library
@using IScheduler = Quartz.IScheduler

@inject IConfiguration AppSettingsConfiguration
@inject IScheduler Scheduler
@inject ILogger Logger
@inject DialogService DialogService
@inject IMelodeeConfigurationFactory ConfigurationFactory
@inject MainLayoutProxyService MainLayoutProxyService
@inject LibraryService LibraryService
@inject NotificationService NotificationService
@inject DirectoryProcessorToStagingService DirectoryProcessorToStagingService

<PageTitle>@_library.Name</PageTitle>

<RadzenBreadCrumb Class="rz-pb-5">
    <RadzenBreadCrumbItem Path="/" Text="Dashboard"/>
    <RadzenBreadCrumbItem Path="/data/libraries" Text="Libraries"/>
    <RadzenBreadCrumbItem Icon="@_library.LibraryTypeIconAndTitle().Item1" Text="@_library.Name"/>
</RadzenBreadCrumb>

@if (CurrentUser!.IsAdmin())
{
    <RadzenStack>
        <RadzenMenu>
            <RadzenMenuItem Text="Clean" Disabled="_library.IsLocked" Click="CleanButtonClick"
                            title="Clean library, removing any empty folders." Icon="mop"></RadzenMenuItem>
            <RadzenMenuItem Text="Edit" Disabled="_library.IsLocked" Click="EditButtonClick" title="Edit library."
                            Icon="edit"></RadzenMenuItem>
            @if (_library.IsLocked)
            {
                <RadzenMenuItem Text="Unlock" Click="UnlockButtonClick"
                                title="Unlock library, will allow modifications." IconColor="@Colors.Warning"
                                Icon="lock_open"></RadzenMenuItem>
            }
            else
            {
                <RadzenMenuItem Text="Lock" Click="LockButtonClick" title="Lock library, will prevent modifications."
                                IconColor="@Colors.Warning" Icon="lock"></RadzenMenuItem>
            }
            <RadzenMenuItem Text="Purge" Disabled="_library.IsLocked" Click="PurgeButtonClick"
                            title="Delete everything in the library" IconColor="@Colors.Danger"
                            Icon="delete_sweep"></RadzenMenuItem>
            @if (_areJobsEnabled && _library.TypeValue != LibraryType.Storage)
            {
                <RadzenMenuItem Text="Process" Click="ProcessButtonClick"
                                title="Process media files into Melodee media json file." IconColor="@Colors.Secondary"
                                Icon="memory"></RadzenMenuItem>
            }
            else if (_areJobsEnabled)
            {
                <RadzenMenuItem Text="Scan" Disabled="_library.IsLocked" Click="ScanButtonClick"
                                title="Scan for Melodee media json files and update database data."
                                IconColor="@Colors.Secondary" Icon="database"></RadzenMenuItem>
            }
            <RadzenMenuItem Text="Update Aggregates" Disabled="_library.IsLocked" Click="UpdateAggregatesButtonClick"
                            title="Update all aggregate counts for library, including; artists, contributors and albums in library."
                            IconColor="@Colors.Secondary" Icon="sync"></RadzenMenuItem>
        </RadzenMenu>
        <RadzenText TextStyle="TextStyle.DisplayH6" TagName="TagName.H1" style="margin: 0">
            <RadzenIcon Icon="@_library.LibraryTypeIconAndTitle().Item1"
                        title="@_library.LibraryTypeIconAndTitle().Item2"/>
            @(_library.Name)
        </RadzenText>
    </RadzenStack>
}

<RadzenStack class="rz-mt-3">
    <RadzenRow>
        <RadzenColumn Size="3">
            <RadzenStack>
                <RadzenCard>
                    <RadzenTree Change="@OnShowItemChange">
                        <RadzenTreeItem Text="Overview" Selected="true">
                            <Template>
                                <RadzenIcon Icon="overview"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                        <RadzenTreeItem
                            Text="@($"{(_library.TypeValue == LibraryType.Storage ? "Scan" : "Process")} History")">
                            <Template>
                                <RadzenIcon Icon="history"/>
                                @context.Text
                            </Template>
                        </RadzenTreeItem>
                    </RadzenTree>
                </RadzenCard>
                <RadzenPanel>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6"
                                    class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="info" class="rz-me-1"/>
                            Details
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Vertical"
                            JustifyContent="JustifyContent.Left"
                            class="rz-pt-1"
                            Gap="5px">
                            <CondensedStatistic Label="Path" Statistic="@_library.Path"/>
                            <CondensedStatistic Label="Type" Statistic="@_library.TypeValue.ToString()"/>
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
                <RadzenPanel>
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6"
                                    class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="monitoring" class="rz-me-1"/>
                            Statistics
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Vertical"
                            JustifyContent="JustifyContent.Left"
                            class="rz-pt-1"
                            Gap="5px">
                            <CondensedStatistic Label="Created"
                                                Statistic="@(CurrentUser?.FormatInstant(_library.CreatedAt))"/>
                            <CondensedStatistic Label="Last Updated"
                                                Statistic="@(CurrentUser?.FormatInstant(_library.LastUpdatedAt))"/>
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
            </RadzenStack>
        </RadzenColumn>
        <RadzenColumn Size="7">
            @if (_showItem == ShowItem.Overview)
            {
                <RadzenPanel AllowCollapse="true">
                    <HeaderTemplate>
                        <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                            <RadzenIcon Icon="monitoring" class="rz-me-1"/>
                            Data Counts
                        </RadzenText>
                    </HeaderTemplate>
                    <ChildContent>
                        <RadzenStack
                            Orientation="Orientation.Horizontal"
                            Wrap="FlexWrap.Wrap"
                            JustifyContent="JustifyContent.Left"
                            class="rz-p-6"
                            Gap="2rem">
                            <RadzenBadge BadgeStyle="BadgeStyle.Info" Shade="Shade.Dark" Style="min-width: 200px;">
                                <RadzenIcon Icon="artist"/>
                                <div style="width:120px;display:inline-block;text-transform:none;text-align:left;">
                                    Artist Count
                                </div>
                                <div style="width:65px;display:inline-block;text-align:right;">
                                    @(_library.ArtistCount.ToStringPadLeft(PadLeftValue))
                                </div>
                            </RadzenBadge>
                            <RadzenBadge BadgeStyle="BadgeStyle.Info" Shade="Shade.Dark" Style="min-width: 200px;">
                                <RadzenIcon Icon="album"/>
                                <div style="width:120px;display:inline-block;text-transform:none;text-align:left;">
                                    Album Count
                                </div>
                                <div style="width:65px;display:inline-block;text-align:right;">
                                    @(_library.AlbumCount.ToStringPadLeft(PadLeftValue))
                                </div>
                            </RadzenBadge>
                            <RadzenBadge BadgeStyle="BadgeStyle.Info" Shade="Shade.Dark" Style="min-width: 200px;">
                                <RadzenIcon Icon="music_note"/>
                                <div style="width:120px;display:inline-block;text-transform:none;text-align:left;">
                                    Song Count
                                </div>
                                <div style="width:65px;display:inline-block;text-align:right;">
                                    @(_library.SongCount.ToStringPadLeft(PadLeftValue))
                                </div>
                            </RadzenBadge>
                        </RadzenStack>
                    </ChildContent>
                </RadzenPanel>
            }
            @if (_showItem == ShowItem.ScanHistory)
            {
                <RadzenDataGrid
                    @ref="_grid"
                    style="height: 500px;"
                    IsLoading=@_isLoading
                    Count="@_count"
                    Data="@_data"
                    LoadData="@LoadData"
                    AllowSorting="true"
                    AllowFiltering="true"
                    AllowRowSelectOnRowClick="false"
                    AllowPaging="true"
                    Page="OnPage"
                    PageSize="DefaultPageSize"
                    PagerHorizontalAlign="HorizontalAlign.Center"
                    ShowPagingSummary="true"
                    PageSizeOptions="@PageSizeOptions"
                    PagingSummaryFormat="@ViewConstants.PagingSummaryFormat"
                    ColumnWidth="200px"
                    SelectionMode="DataGridSelectionMode.Single"
                    @bind-Value=@_selectedData>
                    <Columns>
                        <RadzenDataGridColumn SortOrder="SortOrder.Descending"
                                              Property="@nameof(LibraryScanHistoryDataInfo.CreatedAt)" Title="Scan Date"
                                              Filterable="false" Width="120px">
                            <Template Context="data">
                                <RadzenText Text="@CurrentUser?.FormatInstant(data.CreatedAt)"/>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(LibraryScanHistoryDataInfo.Duration)" Title="Duration"
                                              Filterable="false" Width="100px">
                            <Template Context="data">
                                <RadzenText Text="@CurrentUser?.FormatDuration(data.Duration)"/>
                            </Template>
                        </RadzenDataGridColumn>

                        <RadzenDataGridColumn Property="@nameof(LibraryScanHistoryDataInfo.ForArtistName)"
                                              Title="For Artist"
                                              Filterable="true" Width="120px">
                            <Template Context="data">
                                <RadzenText Text="@data.ForArtistName"/>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(LibraryScanHistoryDataInfo.ForAlbumName)"
                                              Title="For Album"
                                              Filterable="true" Width="120px">
                            <Template Context="data">
                                <RadzenText Text="@data.ForAlbumName"/>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(LibraryScanHistoryDataInfo.FoundArtistsCount)"
                                              Title="Found Artist #"
                                              Filterable="false" Width="100px">
                            <Template Context="data">
                                <RadzenText Text="@data.FoundArtistsCount.ToStringPadLeft(PadLeftValue)"/>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(LibraryScanHistoryDataInfo.FoundAlbumsCount)"
                                              Title="Found Album #"
                                              Filterable="false" Width="100px">
                            <Template Context="data">
                                <RadzenText Text="@data.FoundAlbumsCount.ToStringPadLeft(PadLeftValue)"/>
                            </Template>
                        </RadzenDataGridColumn>
                        <RadzenDataGridColumn Property="@nameof(LibraryScanHistoryDataInfo.FoundSongsCount)"
                                              Title="Found Song #"
                                              Filterable="false" Width="100px">
                            <Template Context="data">
                                <RadzenText Text="@data.FoundSongsCount.ToStringPadLeft(PadLeftValue)"/>
                            </Template>
                        </RadzenDataGridColumn>
                    </Columns>
                </RadzenDataGrid>
            }
        </RadzenColumn>
        <RadzenColumn Size="2">
            <RadzenPanel AllowCollapse="true">
                <HeaderTemplate>
                    <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                        <RadzenIcon Icon="description" class="rz-me-1"/>
                        Description
                    </RadzenText>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenText class="rz-p-6">
                        @_library.Description
                    </RadzenText>
                </ChildContent>
            </RadzenPanel>
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {

    RadzenDataGrid<LibraryScanHistoryDataInfo> _grid = null!;
    int _count;
    IEnumerable<LibraryScanHistoryDataInfo> _data = null!;
    bool _isLoading;
    int _currentPage = 1;

    IMelodeeConfiguration _configuration = new MelodeeConfiguration([]);
    IList<LibraryScanHistoryDataInfo> _selectedData = [];

    const short PadLeftValue = 6;

    ShowItem _showItem = ShowItem.Overview;

    [Parameter] public Guid ApiKey { get; set; }

    Library _library = new()
    {
        Name = string.Empty,
        CreatedAt = default,
        Path = string.Empty,
        Type = (int)LibraryType.NotSet
    };

    private bool _areJobsEnabled;

    private enum ShowItem
    {
        Overview = 1,
        ScanHistory
    }

    void OnPage(PagerEventArgs args)
    {
        _currentPage = args.PageIndex + 1;
    }

    async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            Dictionary<string, string>? sorting = null;
            if (args.Sorts.Any())
            {
                sorting = args.Sorts.ToDictionary(x => x.Property, x => x.SortOrder == SortOrder.Ascending ? PagedRequest.OrderAscDirection : PagedRequest.OrderDescDirection);
            }

            FilterOperatorInfo[]? filters = null;
            if (args.Filters.Any())
            {
                filters = args.Filters.Select(x => new FilterOperatorInfo(x.Property,
                        SafeParser.ToEnum<FilterOperator>(x.FilterOperator.ToDictionary()),
                        x.FilterValue))
                    .ToArray();
            }

            var result = await LibraryService.ListLibraryHistoriesAsync(_library.Id, new PagedRequest
            {
                FilterBy = filters,
                Page = _currentPage,
                PageSize = SafeParser.ToNumber<short>(args.Top),
                OrderBy = sorting
            });

            _data = result.Data;
            _count = SafeParser.ToNumber<int>(result.TotalCount);
        }
        catch (Exception e)
        {
            Logger.Error(e, "Loading Albums");
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }

        _isLoading = false;
    }

    protected override async Task OnParametersSetAsync()
    {
        var dataResult = await LibraryService.GetByApiKeyAsync(ApiKey);
        if (dataResult is { IsSuccess: true, Data: not null })
        {
            _library = dataResult.Data;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _areJobsEnabled = !AppSettingsConfiguration.GetValue<bool>(AppSettingsKeys.QuartzDisabled);
    }

    private async Task PurgeButtonClick()
    {
        var confirm = await DialogService.Confirm("<p>Purging a library deletes all artists, albums and songs.</p><p>There is no undo</p>", "Purge confirmation", new ConfirmOptions { OkButtonText = "Proceed to purge", CancelButtonText = "Cancel" });
        if (confirm ?? false)
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
            try
            {
                var result = await LibraryService.PurgeLibraryAsync(_library.Id);
                NotificationService.Notify(NotificationMessageForResult(result, "purged library", ToastTime));
            }
            finally
            {
                MainLayoutProxyService.ToggleSpinnerVisible();
            }
        }
    }

    private async Task LockButtonClick()
    {
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            _library.IsLocked = true;
            var result = await LibraryService.UpdateAsync(_library);
            NotificationService.Notify(NotificationMessageForResult(result, "locked library", ToastTime));
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }
    }

    private async Task CleanButtonClick()
    {
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            var result = await LibraryService.CleanLibraryAsync(_library.Name);
            NotificationService.Notify(NotificationMessageForResult(result, "cleaned library", ToastTime));
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }
    }

    private async Task UnlockButtonClick()
    {
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            _library.IsLocked = false;
            var result = await LibraryService.UpdateAsync(_library);
            NotificationService.Notify(NotificationMessageForResult(result, "unlocked library", ToastTime));
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }
    }

    private Task EditButtonClick()
    {
        throw new NotImplementedException();
    }


    private void OnShowItemChange(TreeEventArgs arg)
    {
        _showItem = arg.Text is null or "Overview" ? ShowItem.Overview : ShowItem.ScanHistory;
    }

    private async Task ScanButtonClick()
    {
        var confirm = await DialogService.Confirm("<p>Scanning a library updates database information from Melodee data files.</p><p>This action starts a background job.</p><p>There is no undo</p>", "Scan confirmation", new ConfirmOptions { OkButtonText = "Start scan", CancelButtonText = "Cancel" });
        if (confirm ?? false)
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
            try
            {
                await Scheduler.TriggerJob(JobKeyRegistry.LibraryProcessJobJobKey);
                NotificationService.Notify(NotificationMessageForResult(new OperationResult<bool> { Data = true }, "started library scan job", ToastTime));
            }
            finally
            {
                MainLayoutProxyService.ToggleSpinnerVisible();
            }
        }
    }

    private async Task ProcessButtonClick()
    {
        var confirm = await DialogService.ConfirmHtml(
            @"
            <p>Processing a library creates Melodee data files with media found. This could overwrite Melodee data files, images and songs.</p>
            <p>This action starts a background job.</p>
            <p>⚠️ There is no undo</p>
            ", "Scan confirmation",
            new ConfirmOptions { OkButtonText = "Start scan", CancelButtonText = "Cancel" });
        if (confirm ?? false)
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
            try
            {
                var force = true;
                await DirectoryProcessorToStagingService.InitializeAsync();
                var result = await DirectoryProcessorToStagingService.ProcessDirectoryAsync(_library.ToFileSystemDirectoryInfo(), force ? null : _library.LastScanAt, null);
                NotificationService.Notify(NotificationMessageForResult(result, "started library scan job", ToastTime));
            }
            finally
            {
                MainLayoutProxyService.ToggleSpinnerVisible();
            }
        }
    }

    private async Task UpdateAggregatesButtonClick()
    {
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            var result = await LibraryService.UpdateAggregatesAsync(_library.Id);
            NotificationService.Notify(NotificationMessageForResult(result, "updated library aggregates", ToastTime));
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }
    }

}
