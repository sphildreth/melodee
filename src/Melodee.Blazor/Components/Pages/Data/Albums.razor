@page "/data/albums"
@using System.Security.Claims
@using Melodee.Common.Enums
@using Melodee.Common.Filtering
@using Melodee.Common.Models.Collection
@using Melodee.Common.Models.Collection.Extensions
@using Artist = Melodee.Common.Data.Models.Artist
@using FilterOperator = Melodee.Common.Filtering.FilterOperator

@inherits MelodeeComponentBase

@inject MainLayoutProxyService MainLayoutProxyService
@inject ILogger Logger
@inject IMelodeeConfigurationFactory ConfigurationFactory
@inject ArtistService ArtistService
@inject AlbumService AlbumService
@inject StatisticsService StatisticsService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager NavigationManager

<PageTitle>Albums</PageTitle>

<RadzenBreadCrumb Class="rz-pb-5">
    <RadzenBreadCrumbItem Path="/" Text="Dashboard"/>
    <RadzenBreadCrumbItem Icon="album" Text="Albums"/>
</RadzenBreadCrumb>

<RadzenStack>
    <RadzenRow>
        <RadzenPanel class="rz-w-100" AllowCollapse="true">
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                    <RadzenIcon Icon="monitoring" class="rz-me-1"/>
                    Statistics
                </RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack
                    Orientation="Orientation.Horizontal"
                    Wrap="FlexWrap.Wrap"
                    JustifyContent="JustifyContent.Left"
                    class="rz-p-2"
                    Gap="8px">
                    @foreach (var statistic in _statistics)
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Info" Shade="Shade.Dark" Style="min-width: 200px;">
                            <RadzenIcon Icon="@statistic.Icon"/>
                            <div style="width:120px;display:inline-block;text-transform:none;text-align:left;">
                                @($"{statistic.Title}")
                            </div>
                            <div style="width:100px;display:inline-block;text-align:right;" title="@statistic.Message">
                                @if (statistic.Type == StatisticType.Count)
                                {
                                    @($"{((int)statistic.Data).ToStringPadLeft(ViewConstants.StatisticNumberPadLength)}")
                                }
                                else
                                {
                                    @statistic.Data
                                }
                            </div>
                        </RadzenBadge>
                    }
                </RadzenStack>
            </ChildContent>
        </RadzenPanel>
    </RadzenRow>
    <RadzenRow AlignItems="AlignItems.Center">
        <RadzenColumn Size="12" SizeMD="6">
            <RadzenText Text="Albums" TextStyle="TextStyle.DisplayH6" TagName="TagName.H1" style="margin: 0"/>
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="6" Visible="CurrentUser?.IsEditor() ?? false">
            <RadzenStack
                Orientation="Orientation.Horizontal"
                AlignItems="AlignItems.Center"
                JustifyContent="JustifyContent.End"
                Gap="0.5rem">
                <RadzenButton Icon="cell_merge" Disabled="_selectedAlbums.Count < 2" Text="Merge"
                              Click="@MergeSelectedButtonClick"
                              Size="ButtonSize.Small"
                              ButtonStyle="ButtonStyle.Warning"/>
                <RadzenButton Icon="delete" Disabled="!_selectedAlbums.Any()" Text="Delete"
                              Click="@DeleteSelectedButtonClick"
                              Size="ButtonSize.Small"
                              ButtonStyle="ButtonStyle.Warning"/>
            </RadzenStack>
        </RadzenColumn>
    </RadzenRow>
    @if (_filterToArtist != null)
    {
        <RadzenRow>
            <RadzenColumn Size="12" SizeMD="6">
                <RadzenStack Orientation="Orientation.Horizontal">
                    <RadzenIcon icon="filter_alt" IconColor="@Colors.Secondary"/>
                    <RadzenText Text="Showing albums for artist:"/>
                    <RadzenLink Text="@_filterToArtist.Name" Path="@($"/data/artist/{_filterToArtist.ApiKey}")"/>
                    <RadzenButton Size="ButtonSize.ExtraSmall" Click="ClearFilterToArtist" Icon="close"
                                  ButtonStyle="ButtonStyle.Secondary"/>
                </RadzenStack>
            </RadzenColumn>
        </RadzenRow>
    }
    else
    {
        <DebounceInput class="rz-textbox rz-w-100"
                       autocomplete="off"
                       @bind-Value="@_debounceInputValue"
                       @bind-Value:event="OnInput"
                       DebounceTime="800"
                       MinLength="3"
                       OnValueChanged="@DoSearchAsync"
                       ForceNotifyByEnter="true"
                       ForceNotifyOnBlur="true"/>
    }
    <RadzenRow>
        <RadzenDataGrid
            @ref="_grid"
            style="height: 500px;"
            IsLoading="@_isLoading"
            Count="@_count"
            Data="@_albums"
            LoadData="@LoadData"
            AllowSorting="true"
            AllowFiltering="true"
            AllowRowSelectOnRowClick="false"
            AllowPaging="true"
            Page="OnPage"
            PageSize="DefaultPageSize"
            PagerHorizontalAlign="HorizontalAlign.Center"
            ShowPagingSummary="true"
            PageSizeOptions="@PageSizeOptions"
            PagingSummaryFormat="@ViewConstants.PagingSummaryFormat"
            ColumnWidth="200px"
            SelectionMode="DataGridSelectionMode.Multiple"
            @bind-Value="@_selectedAlbums">
            <Columns>
                <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false">
                    <HeaderTemplate>
                        <RadzenCheckBox
                            TabIndex="-1"
                            TriState="false"
                            TValue="bool?"
                            InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select all items" } })"
                            Value="@(_selectedAlbums.Any() != true ? false : !_albums.All(i => _selectedAlbums.Contains(i)) ? null : _albums.Any(i => _selectedAlbums.Contains(i)))"
                            Change="@(args => _selectedAlbums = args == true ? _albums.ToList() : [])"/>
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenIcon Icon="lock" IconColor="@Colors.Warning" Visible="@(data.IsLocked)"
                                    title="Album is locked. Locked albums cannot be deleted."/>
                        <RadzenCheckBox
                            TabIndex="-1"
                            TriState="false"
                            Value="@(_selectedAlbums.Contains(data))"
                            InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select item" } })"
                            Change="@(_ => { _grid.SelectRow(data); })"
                            Visible="@(!data.IsLocked)"
                            TValue="bool"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.Name)" Title="Name" Width="300px">
                    <Template Context="data">
                        <RadzenButton Style="float:right;margin-top: 7px;" Visible="@(CurrentUser?.IsEditor() ?? false)"
                                      Size="ButtonSize.ExtraSmall"
                                      Click=@(_ => NavigationManager.NavigateTo($"/data/albumedit/{data.ApiKey}"))
                                      Icon="edit" ButtonStyle="ButtonStyle.Secondary"/>
                        <RadzenImage Path=@($"/images/{data.ToApiKey()}/{ ImageSize.Thumbnail }") Style="margin-right: 5px;"
                                     AlternateText="@data.Name"/>
                        <RadzenLink text="@data.Name" class="rz-text-wrap" Path="@data.DetailUrl()"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.AlternateNames)" Title="Alt Names" Width="100px">
                    <Template Context="data">
                        <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Gap="5px">
                            @foreach (var name in data.AlternateNames?.ToTags() ?? [])
                            {
                                <RadzenBadge IsPill="true" BadgeStyle="BadgeStyle.Primary" Text="@name"/>
                            }
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.ArtistName)" Title="Artist" Width="150px">
                    <Template Context="data">
                        <RadzenLink Text="@data.ArtistName" Path="@($"/data/artist/{data.ArtistApiKey}")"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.SongCount)" Title="Songs" Width="90px">
                    <Template Context="data">
                        <RadzenText Text="@CurrentUser?.FormatNumber(data.SongCount)"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.Duration)" Title="Duration" Width="120px">
                    <Template Context="data">
                        <RadzenText Text="@data.Duration.ToFormattedDateTimeOffset()"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.CreatedAt)" Title="Created" Filterable="false"
                                      Width="120px">
                    <Template Context="data">
                        <RadzenText Text="@CurrentUser?.FormatInstant(data.CreatedAt)"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.Tags)" Title="Tags" Width="100px">
                    <Template Context="data">
                        <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Gap="5px">
                            @foreach (var name in data.Tags?.ToTags() ?? [])
                            {
                                <RadzenBadge IsPill="true" BadgeStyle="BadgeStyle.Primary" Text="@name"/>
                            }
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenRow>
</RadzenStack>

@code {
    Statistic[] _statistics = [];
    RadzenDataGrid<AlbumDataInfo> _grid = null!;
    int _count;
    IEnumerable<AlbumDataInfo> _albums = null!;
    bool _isLoading;
    int _currentPage = 1;
    IList<AlbumDataInfo> _selectedAlbums = [];

    Artist? _filterToArtist;
    string _debounceInputValue = "";

    [SupplyParameterFromQuery] [Parameter] public Guid? FilterToArtistApiKey { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (FilterToArtistApiKey != null)
        {
            _filterToArtist = (await ArtistService.GetByApiKeyAsync(FilterToArtistApiKey.Value))?.Data;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var statResult = await StatisticsService.GetUserAlbumStatisticsAsync(SafeParser.ToGuid(CurrentUser?.FindFirstValue(ClaimTypes.Sid) ?? string.Empty) ?? Guid.Empty);
        _statistics = statResult?.Data ?? [];
    }

    void OnPage(PagerEventArgs args)
    {
        _currentPage = args.PageIndex + 1;
    }

    async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            Dictionary<string, string>? sorting = null;
            if (args.Sorts.Any())
            {
                sorting = args.Sorts.ToDictionary(x => x.Property, x => x.SortOrder == SortOrder.Ascending ? PagedRequest.OrderAscDirection : PagedRequest.OrderDescDirection);
            }

            FilterOperatorInfo[]? filters = null;
            if (_debounceInputValue.Nullify() != null)
            {
                filters =
                [
                    new FilterOperatorInfo(nameof(AlbumDataInfo.NameNormalized), FilterOperator.Contains, _debounceInputValue.ToNormalizedString() ?? _debounceInputValue),
                    new FilterOperatorInfo(nameof(AlbumDataInfo.AlternateNames), FilterOperator.Contains, _debounceInputValue.ToNormalizedString() ?? _debounceInputValue, FilterOperatorInfo.OrJoinOperator)
                ];
            }
            else if (args.Filters.Any())
            {
                filters = args.Filters.Select(x => x.ToFilterOperatorInfo()).ToArray();
            }

            PagedResult<AlbumDataInfo> result;
            if (FilterToArtistApiKey != null || args.Filters.Any(x => x.Property == nameof(AlbumDataInfo.ArtistName)))
            {
                var v = FilterToArtistApiKey ?? (await ArtistService.GetByNameNormalized(args.Filters.FirstOrDefault(x => x.Property == nameof(AlbumDataInfo.ArtistName))?.FilterValue?.ToString()?.ToNormalizedString() ?? string.Empty))?.Data?.ApiKey;
                result = await AlbumService.ListForArtistApiKeyAsync(new PagedRequest
                {
                    FilterBy = filters,
                    Page = _currentPage,
                    PageSize = SafeParser.ToNumber<short>(args.Top),
                    OrderBy = sorting
                }, v ?? Guid.Empty);
            }
            else
            {
                result = await AlbumService.ListAsync(new PagedRequest
                {
                    FilterBy = filters,
                    Page = _currentPage,
                    PageSize = SafeParser.ToNumber<short>(args.Top),
                    OrderBy = sorting
                });
            }

            _albums = result.Data;
            _count = SafeParser.ToNumber<int>(result.TotalCount);
        }
        catch (Exception e)
        {
            Logger.Error(e, "Loading Albums");
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }

        _isLoading = false;
    }

    private void AddButtonClick()
    {
        NavigationManager.NavigateTo($"/data/albumedit/{Guid.Empty}");
    }


    private async Task DeleteSelectedButtonClick()
    {
        var confirm = await DialogService.Confirm("Are you sure?", "Delete confirmation", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm ?? false)
        {
            var deleteResult = await AlbumService.DeleteAsync(_selectedAlbums.Select(x => x.Id).ToArray());
            if (deleteResult.IsSuccess)
            {
                NotificationService.Notify(NotificationMessageForResult(deleteResult, "Deleting Albums", ToastTime));
                await _grid.RefreshDataAsync();
                return;
            }

            NotificationService.Notify(NotificationMessageForResult(deleteResult, "Deleting Albums", ToastTime));
        }
    }

    private async Task DoSearchAsync(string s)
    {
        await LoadData(new LoadDataArgs { Sorts = [], Filters = [] });
    }

    private void MergeSelectedButtonClick()
    {
        throw new NotImplementedException();
    }

    private async Task ClearFilterToArtist()
    {
        _filterToArtist = null;
        FilterToArtistApiKey = null;
        await _grid.RefreshDataAsync();
    }

}


