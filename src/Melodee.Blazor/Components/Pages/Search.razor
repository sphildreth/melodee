@page "/search/{Query}"
@using System.Security.Claims
@using Melodee.Common.Data.Models.Extensions
@using Melodee.Common.Models.Collection
@using Melodee.Common.Models.Search
@using Album = Melodee.Common.Data.Models.Album
@using Artist = Melodee.Common.Data.Models.Artist
@using Song = Melodee.Common.Data.Models.Song
@inject SearchService SearchService
@inject MainLayoutProxyService MainLayoutProxyService
@inject IMelodeeConfigurationFactory ConfigurationFactory
@inject IJSRuntime JsRuntime

@inherits MelodeeComponentBase

<PageTitle>Search Results</PageTitle>

<RadzenStack>
    <RadzenStack Orientation="Orientation.Horizontal">
        <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-m-0">Results for: @Query</RadzenText>
    </RadzenStack>
    <RadzenPanel AllowCollapse="true" Visible="_searchResult.Artists.Any()">
        <HeaderTemplate>
            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-display-flex rz-m-0">
                <RadzenIcon Icon="artist" class="rz-me-1"/>
                Artists (@_searchResult.Artists.Length)
            </RadzenText>
        </HeaderTemplate>
        <ChildContent>
            <RadzenStack
                Orientation="Orientation.Horizontal"
                Wrap="FlexWrap.Wrap"
                JustifyContent="JustifyContent.Left"
                class="rz-p-2"
                Gap="10px">
                @foreach (var artist in _searchResult.Artists)
                {
                    <ArtistDataInfoCardComponent Artist="@artist"/>
                }
            </RadzenStack>
        </ChildContent>
    </RadzenPanel>
    <RadzenPanel AllowCollapse="true" Visible="_searchResult.Albums.Any()">
        <HeaderTemplate>
            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-display-flex rz-m-0">
                <RadzenIcon Icon="album" class="rz-me-1"/>
                Albums (@_searchResult.Albums.Length)
            </RadzenText>
        </HeaderTemplate>
        <ChildContent>
            <RadzenTable AllowAlternatingRows="true">
                <RadzenTableHeader>
                    <RadzenTableHeaderRow>
                        <RadzenTableHeaderCell>
                            Artist
                        </RadzenTableHeaderCell>
                        <RadzenTableHeaderCell>
                            Album
                        </RadzenTableHeaderCell>
                        <RadzenTableHeaderCell style="width: 100px;">
                            Year
                        </RadzenTableHeaderCell>
                    </RadzenTableHeaderRow>
                </RadzenTableHeader>
                <RadzenTableBody>
                    @foreach (var album in _searchResult.Albums)
                    {
                        <RadzenTableRow>
                            <RadzenTableCell>
                                <RadzenLink Path="@($"/data/artist/{album.ArtistApiKey}")">
                                    <RadzenImage Path="@($"/images/artist_{album.ArtistApiKey}/{ ImageSize.Thumbnail }")"
                                                 Style="width: 30px; height: 30px; margin-right: 5px;"/>
                                    @album.ArtistName
                                </RadzenLink>
                            </RadzenTableCell>
                            <RadzenTableCell>
                                <RadzenLink Path="@($"/data/album/{album.ApiKey}")">
                                    <RadzenImage Path="@($"/images/album_{album.ApiKey}/{ ImageSize.Thumbnail }")"
                                                 Style="width: 30px; height: 30px; margin-right: 5px;"/>
                                    @album.Name
                                </RadzenLink>
                            </RadzenTableCell>
                            <RadzenTableCell>
                                @album.ReleaseDate.Year
                            </RadzenTableCell>
                        </RadzenTableRow>
                    }
                </RadzenTableBody>
            </RadzenTable>
        </ChildContent>
    </RadzenPanel>
    <RadzenPanel AllowCollapse="true" Visible="_searchResult.Songs.Any()">
        <HeaderTemplate>
            <RadzenText TextStyle="TextStyle.Subtitle2" class="rz-display-flex rz-m-0">
                <RadzenIcon Icon="album" class="rz-me-1"/>
                Songs (@_searchResult.Songs.Length)
            </RadzenText>
        </HeaderTemplate>
        <ChildContent>
            <RadzenTable AllowAlternatingRows="true">
                <RadzenTableHeader>
                    <RadzenTableHeaderRow>
                        <RadzenTableHeaderCell>
                            Artist
                        </RadzenTableHeaderCell>
                        <RadzenTableHeaderCell>
                            Album
                        </RadzenTableHeaderCell>
                        <RadzenTableHeaderCell style="width: 100px;">
                            Year
                        </RadzenTableHeaderCell>
                        <RadzenTableHeaderCell>
                            Title
                        </RadzenTableHeaderCell>
                    </RadzenTableHeaderRow>
                </RadzenTableHeader>
                <RadzenTableBody>
                    @foreach (var song in _searchResult.Songs)
                    {
                        <RadzenTableRow>
                            <RadzenTableCell>
                                <RadzenLink Path="@($"/data/artist/{song.ArtistApiKey}")">
                                    <RadzenImage Path="@($"/images/artist_{song.ArtistApiKey}/{ ImageSize.Thumbnail }")"
                                                 Style="width: 30px; height: 30px; margin-right: 5px;"/>
                                    @song.ArtistName
                                </RadzenLink>
                            </RadzenTableCell>
                            <RadzenTableCell>
                                <RadzenLink Path="@($"/data/album/{song.AlbumApiKey}")">
                                    <RadzenImage Path="@($"/images/album_{song.AlbumApiKey}/{ ImageSize.Thumbnail }")"
                                                 Style="width: 30px; height: 30px; margin-right: 5px;"/>
                                    @song.AlbumName
                                </RadzenLink>
                            </RadzenTableCell>
                            <RadzenTableCell>
                                @song.ReleaseDate.Year
                            </RadzenTableCell>
                            <RadzenTableCell>
                                <RadzenIcon
                                    Icon="play_arrow"
                                    class="filled-icon"
                                    IconColor="@Colors.Info"
                                    title="Play song"
                                    @onclick="@(() => PlaySong(song))"
                                    Style="cursor:pointer;font-size:14px;"/>
                                @song.Title
                            </RadzenTableCell>
                        </RadzenTableRow>
                    }
                </RadzenTableBody>
            </RadzenTable>

        </ChildContent>
    </RadzenPanel>
</RadzenStack>

@code {

    string _userAgent = string.Empty;

    [Parameter] public required string Query { get; set; }

    SearchResult _searchResult = new([], 0, [], 0, [], 0, [], 0, [], 0);
    private short _defaultMaxResults;

    protected override async Task OnParametersSetAsync()
    {
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            var searchResult = await SearchService.DoSearchAsync(
                SafeParser.ToGuid(CurrentUser?.FindFirstValue(ClaimTypes.Sid) ?? string.Empty) ?? Guid.Empty,
                _userAgent,
                Query,
                1,
                1,
                1,
                _defaultMaxResults,
                SearchInclude.Data);
            if (searchResult.IsSuccess)
            {
                _searchResult = searchResult.Data;
            }
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible(false);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _userAgent = await JsRuntime.InvokeAsync<string>("getUserAgent", []);

        var configuration = await ConfigurationFactory.GetConfigurationAsync();
        _defaultMaxResults = configuration.GetValue<short?>(SettingRegistry.SearchResultsDefaultPageSize) ??
                             configuration.GetValue<short?>(SettingRegistry.DefaultsPageSize) ??
                             50;
    }

    private async Task PlaySong(SongDataInfo song)
    {
        var songs = new List<Song>
        {
            new Song
            {
                ApiKey = song.ApiKey,
                Album = new Album
                {
                    ApiKey = song.ApiKey,
                    Artist = new Artist
                    {
                        ApiKey = song.ArtistApiKey,
                        Name = song.ArtistName,
                        NameNormalized = song.ArtistName.ToNormalizedString() ?? song.ArtistName,
                        Directory = string.Empty,
                        LibraryId = 0,
                        CreatedAt = song.CreatedAt
                    },
                    Name = song.AlbumName,
                    NameNormalized = song.AlbumName.ToNormalizedString() ?? song.AlbumName,
                    Directory = string.Empty,
                    CreatedAt = song.CreatedAt
                },
                Duration = song.Duration,
                Title = song.Title,
                TitleNormalized = song.TitleNormalized,
                SongNumber = song.SongNumber,
                FileName = string.Empty,
                FileSize = 0,
                FileHash = string.Empty,
                SamplingRate = 0,
                BitRate = 0,
                BitDepth = 0,
                BPM = 0,
                ContentType = "audio/mp3",
                CreatedAt = song.CreatedAt
            }
        };
        await PlayAction(song.Title, songs.Select(x => x.ToSongDataInfo()).ToList());
    }

}
