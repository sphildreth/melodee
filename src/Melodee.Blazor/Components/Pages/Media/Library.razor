@page "/media/library/{ApiKey:guid}"
@inherits MelodeeComponentBase
@using Melodee.Common.Data.Models.Extensions
@using Melodee.Common.Enums
@using Melodee.Common.Filtering
@using Melodee.Common.Models.Collection
@using Melodee.Common.Models.Collection.Extensions
@using Melodee.Common.Models.Extensions
@using Melodee.Common.Services.Scanning
@using FileInfo = FileInfo
@using FilterOperator = Melodee.Common.Filtering.FilterOperator

@inject MainLayoutProxyService MainLayoutProxyService
@inject ILogger Logger
@inject LibraryService LibraryService
@inject AlbumDiscoveryService AlbumDiscoveryService
@inject NotificationService NotificationService
@inject DialogService DialogService
@inject NavigationManager NavigationManager
@inject DefaultImages DefaultImages
@inject DirectoryProcessorToStagingService DirectoryProcessorToStagingService

@attribute [Authorize(Roles = "Administrator,Editor")]

<PageTitle>@_library.Name</PageTitle>

<RadzenBreadCrumb Class="rz-pb-5">
    <RadzenBreadCrumbItem Path="/" Text="Dashboard"/>
    <RadzenBreadCrumbItem Icon="folder" Text="@_library.Name"/>
</RadzenBreadCrumb>

<RadzenStack>
    <RadzenMenu>
        <RadzenMenuItem Text="Clean" Disabled="_library.IsLocked" Click="CleanButtonClick"
                        title="Clean this media library directory." IconColor="@Colors.Warning"
                        Icon="mop"></RadzenMenuItem>
        <RadzenMenuItem Text="Delete Albums" Disabled="@(!_library.IsLocked && _selectedAlbums.Count == 0)"
                        Click="DeleteSelectedButtonClick"
                        title="Delete selected media albums, including album files. BEWARE!" IconColor="@Colors.Warning"
                        Icon="remove"></RadzenMenuItem>
        <RadzenMenuItem Text="Delete" Disabled="_library.IsLocked" conColor="@Colors.Warning" Icon="delete">
            <RadzenMenuItem Text="Delete not Ok" Click="DeleteNotOkSelectedButtonClick"
                            title="Delete all not Ok status albums in library. BEWARE!" IconColor="@Colors.Warning"
                            Icon="delete_sweep"></RadzenMenuItem>
            <RadzenMenuItem Text="Delete with less than 4 songs" Click="DeleteLessThanFourSongsButtonClick"
                            title="Delete all albums with less than 4 songs. BEWARE!" IconColor="@Colors.Warning"
                            Icon="delete_sweep"></RadzenMenuItem>
            <RadzenMenuItem Text="Delete less than 10 minutes" Click="DeleteLessThan10MinutesButtonClick"
                            title="Delete all albums with duration less than 10 minutes. BEWARE!"
                            IconColor="@Colors.Warning" Icon="delete_sweep"></RadzenMenuItem>
            @foreach (var librariesAlbumsGroupedByStatus in _librariesAlbumsGroupedByStatus)
            {
                <RadzenMenuItem Text="@($"Delete all albums with status [{librariesAlbumsGroupedByStatus.Key}]")"
                                Click="@(args => DeleteAlbumsByStatus(librariesAlbumsGroupedByStatus.Key))"
                                title="@($"Delete all albums with status [{librariesAlbumsGroupedByStatus.Key}]. BEWARE!")"
                                IconColor="@Colors.Warning" Icon="delete_sweep"></RadzenMenuItem>
            }
        </RadzenMenuItem>
        <RadzenMenuItem Text="Process" Disabled="_library.IsLocked" Click="ProcessButtonClick"
                        title="Run process job on this library." Icon="memory"></RadzenMenuItem>
        <RadzenMenuItem Text="Move Ok" Disabled="_library.IsLocked" Click="MoveOkButtonClick"
                        title="Move Ok media albums to Library." Icon="move_group"></RadzenMenuItem>
    </RadzenMenu>

    <RadzenText
        Text="Media Albums"
        TextStyle="TextStyle.DisplayH6"
        TagName="TagName.H1"
        style="margin: 0"/>

    <DebounceInput class="rz-textbox rz-w-100"
                   autocomplete="off"
                   @bind-Value="@_debounceInputValue"
                   @bind-Value:event="OnInput"
                   DebounceTime="800"
                   MinLength="3"
                   OnValueChanged="@DoSearchAsync"
                   ForceNotifyByEnter="true"
                   ForceNotifyOnBlur="true"/>

    <RadzenRow>
        <RadzenDataGrid
            @ref="_grid"
            style="height: 500px;"
            IsLoading="@_isLoading"
            Count="@_count"
            Data="@_albums"
            LoadData="@LoadData"
            AllowSorting="true"
            AllowFiltering="true"
            AllowRowSelectOnRowClick="false"
            AllowPaging="true"
            Page="OnPage"
            PageSize="DefaultPageSize"
            PagerHorizontalAlign="HorizontalAlign.Center"
            ShowPagingSummary="true"
            PageSizeOptions="@PageSizeOptions"
            PagingSummaryFormat="@ViewConstants.PagingSummaryFormat"
            ColumnWidth="200px"
            SelectionMode="DataGridSelectionMode.Multiple"
            @bind-Value="@_selectedAlbums">
            <Columns>
                <RadzenDataGridColumn Width="60px" Sortable="false" Filterable="false">
                    <HeaderTemplate>
                        <RadzenCheckBox
                            TabIndex="-1"
                            TriState="false"
                            TValue="bool?"
                            InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select all items" } })"
                            Value="@(_selectedAlbums.Any() != true ? false : !_albums.All(i => _selectedAlbums.Contains(i)) ? null : _albums.Any(i => _selectedAlbums.Contains(i)))"
                            Change="@(args => _selectedAlbums = args == true ? _albums.ToList() : [])"/>
                    </HeaderTemplate>
                    <Template Context="data">
                        <RadzenCheckBox
                            TabIndex="-1"
                            TriState="false"
                            Value="@(_selectedAlbums.Contains(data))"
                            InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select item" } })"
                            Change="@(_ => { _grid?.SelectRow(data); })"
                            TValue="bool"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.Name)" Title="Name" Width="300px">
                    <Template Context="data">
                        <RadzenButton Style="float:right;margin-top: 7px;" Visible="@(CurrentUser?.IsEditor() ?? false)"
                                      Size="ButtonSize.ExtraSmall"
                                      Click=@(_ => NavigationManager.NavigateTo($"/media/album/{_library.ApiKey}/{data.ApiKey}/edit"))
                                      Icon="edit" ButtonStyle="ButtonStyle.Secondary"/>
                        <RadzenImage Path="@data.ImageBase64(DefaultImages.AlbumCoverBytes)"
                                     Style="margin-right: 5px; width: 32px; height: 32px;"
                                     AlternateText="@data.Name"/>
                        <RadzenLink text="@data.Name" class="rz-text-wrap"
                                    Path="@($"/media/album/{_library.ApiKey}/{data.ApiKey}")"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.AlbumStatusValue)" Title="Status" Width="100px">
                    <Template Context="data">
                        <RadzenText Text="@data.AlbumStatusValue.ToString()"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.ArtistName)" Title="Artist" Width="150px">
                    <Template Context="data">
                        @if (data.ArtistApiKey != Guid.Empty)
                        {
                            <RadzenLink Text="@data.ArtistName" Path="@($"/data/artist/{data.ArtistApiKey}")"/>
                        }
                        else
                        {
                            <RadzenText Text="@data.ArtistName"/>
                        }
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.NeedsAttentionReasonsValue)" Filterable="false"
                                      Title="Status Reasons" Width="200px">
                    <Template Context="data">
                        <RadzenText Text="@data.NeedsAttentionReasonsValue.ToString()"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.SongCount)" Filterable="false" Title="Songs"
                                      Width="90px">
                    <Template Context="data">
                        <RadzenText Text="@CurrentUser?.FormatNumber(data.SongCount)"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.Duration)" Filterable="false" Title="Duration"
                                      Width="120px">
                    <Template Context="data">
                        <RadzenText Text="@data.Duration.ToFormattedDateTimeOffset()"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn
                    Property="@nameof(AlbumDataInfo.CreatedAt)"
                    Title="Created"
                    Filterable="false"
                    SortOrder="SortOrder.Descending"
                    Width="120px">
                    <Template Context="data">
                        <RadzenText Text="@CurrentUser?.FormatInstant(data.CreatedAt)"/>
                    </Template>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn Property="@nameof(AlbumDataInfo.Tags)" Filterable="false" Title="Tags"
                                      Width="100px">
                    <Template Context="data">
                        <RadzenStack Orientation="Orientation.Horizontal" Wrap="FlexWrap.Wrap" Gap="5px">
                            @foreach (var name in data.Tags?.ToTags() ?? [])
                            {
                                <RadzenBadge IsPill="true" BadgeStyle="BadgeStyle.Primary" Text="@name"/>
                            }
                        </RadzenStack>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </RadzenRow>
</RadzenStack>

@code {

    RadzenDataGrid<AlbumDataInfo>? _grid;
    int _count;
    IEnumerable<AlbumDataInfo> _albums = null!;
    bool _isLoading;
    int _currentPage = 1;
    IList<AlbumDataInfo> _selectedAlbums = [];

    Common.Data.Models.Library _library = new()
    {
        Name = string.Empty,
        Path = string.Empty,
        Type = 0,
        CreatedAt = default
    };

    Dictionary<string, int> _librariesAlbumsGroupedByStatus = new();

    string _debounceInputValue = "";

    [Parameter] public Guid ApiKey { get; set; }

    void OnPage(PagerEventArgs args)
    {
        _currentPage = args.PageIndex + 1;
    }

    protected override async Task OnParametersSetAsync()
    {
        var libraryResult = await LibraryService.GetByApiKeyAsync(ApiKey);
        _library = libraryResult.Data!;
        if (_grid != null)
        {
            await _grid.RefreshDataAsync();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await AlbumDiscoveryService.InitializeAsync();
    }

    async Task LoadData(LoadDataArgs args)
    {
        if (_library.Path.Nullify() == null)
        {
            return;
        }

        _isLoading = true;
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            Dictionary<string, string>? sorting = null;
            if (args.Sorts.Any())
            {
                sorting = args.Sorts.ToDictionary(x => x.Property, x => x.SortOrder == SortOrder.Ascending ? PagedRequest.OrderAscDirection : PagedRequest.OrderDescDirection);
            }

            FilterOperatorInfo[]? filters = null;
            if (_debounceInputValue.Nullify() != null)
            {
                filters =
                [
                    new FilterOperatorInfo(nameof(AlbumDataInfo.NameNormalized), FilterOperator.Contains, _debounceInputValue.ToNormalizedString() ?? _debounceInputValue)
                ];
            }
            else if (args.Filters.Any())
            {
                filters = args.Filters.Select(x => new FilterOperatorInfo(x.Property,
                        SafeParser.ToEnum<FilterOperator>(x.FilterOperator.ToDictionary()),
                        x.FilterValue))
                    .ToArray();
            }

            var result = await AlbumDiscoveryService.AlbumsDataInfosForDirectoryAsync(_library.ToFileSystemDirectoryInfo(),
                new PagedRequest
                {
                    FilterBy = filters,
                    Page = _currentPage,
                    PageSize = SafeParser.ToNumber<short>(args.Top),
                    OrderBy = sorting
                });

            _albums = result.Data;
            _count = SafeParser.ToNumber<int>(result.TotalCount);

            var allAlbums = await AlbumDiscoveryService.AllMelodeeAlbumDataFilesForDirectoryAsync(_library.ToFileSystemDirectoryInfo());
            _librariesAlbumsGroupedByStatus = allAlbums.Data?
                .Where(x => x.Status != AlbumStatus.Ok)
                .GroupBy(x => x.StatusReasons)
                .ToDictionary(x => x.Key.ToString(), x => x.Count()) ?? new Dictionary<string, int>();
        }
        catch (Exception e)
        {
            Logger.Error(e, "Loading Albums");
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible(false);
        }

        _isLoading = false;
    }

    private async Task DeleteSelectedButtonClick()
    {
        var confirm = await DialogService.Confirm("Are you sure?", "Delete confirmation", new ConfirmOptions { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirm ?? false)
        {
            foreach (var toDelete in _selectedAlbums)
            {
                var fileInfo = new FileInfo(toDelete.MelodeeDataFileName ?? string.Empty);
                if (fileInfo.DirectoryName != null)
                {
                    Directory.Delete(fileInfo.DirectoryName, true);
                }
            }

            if (_grid != null)
            {
                await _grid.RefreshDataAsync();
            }

            NotificationService.Notify(NotificationMessageForResult(new OperationResult<bool>
            {
                Data = true
            }, "Deleting Albums", ToastTime));
            _selectedAlbums.Clear();
        }
    }

    private async Task DoSearchAsync(string s)
    {
        await LoadData(new LoadDataArgs { Sorts = [], Filters = [] });
    }

    private async Task ProcessButtonClick()
    {
        var confirm = await DialogService.ConfirmHtml(
            @"
            <p>Scanning a library updates the library with media found. This could delete artists, albums and songs.</p>
            <p>This action starts a background job.</p>
            <p>⚠️ There is no undo</p>
            ", "Scan confirmation",
            new ConfirmOptions { OkButtonText = "Start scan", CancelButtonText = "Cancel"});

        if (confirm ?? false)
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
            try
            {
                await DirectoryProcessorToStagingService.InitializeAsync();
                var result = await DirectoryProcessorToStagingService.ProcessDirectoryAsync(_library.ToFileSystemDirectoryInfo(), _library.LastScanAt, null);
                NotificationService.Notify(NotificationMessageForResult(result, "started library scan job", ToastTime));
            }
            finally
            {
                MainLayoutProxyService.ToggleSpinnerVisible();
            }
        }
    }

    private async Task MoveOkButtonClick()
    {
        MainLayoutProxyService.ToggleSpinnerVisible();
        try
        {
            var librariesResult = await LibraryService.GetStorageLibrariesAsync();
            if (librariesResult.Data.Length > 1)
            {
                // TODO If more than one Library type library then prompt for which library to move into
                throw new NotImplementedException();
            }

            var storageLibrary = librariesResult.Data.First();
            var moveResult = await LibraryService.MoveAlbumsFromLibraryToLibrary(
                _library.Name,
                storageLibrary.Name,
                a => a.Status == AlbumStatus.Ok,
                true);
            NotificationService.Notify(NotificationMessageForResult(moveResult, "Moving Ok Albums", ToastTime));
            if (_grid != null) await _grid.RefreshDataAsync();
        }
        finally
        {
            MainLayoutProxyService.ToggleSpinnerVisible();
        }
    }

    private async Task DeleteNotOkSelectedButtonClick()
    {
        var confirm = await DialogService.ConfirmHtml("<p>Deleting all not Ok albums can potentially delete many albums</p><p>⚠️ There is no undo</p>", "Deleting not Ok", new ConfirmOptions { OkButtonText = "Delete", CancelButtonText = "Cancel" });
        if (confirm ?? false)
        {
            var didDelete = await AlbumDiscoveryService.DeleteAlbumsAsync(_library.ToFileSystemDirectoryInfo(), album => album.Status != AlbumStatus.Ok);

            if (didDelete)
            {
                if (_grid != null)
                {
                    await _grid.RefreshDataAsync();
                }

                NotificationService.Notify(NotificationMessageForResult(new OperationResult<bool>
                {
                    Data = true
                }, "deleted albums", ToastTime));
                _selectedAlbums.Clear();
            }
        }
    }

    private Task CleanButtonClick()
    {
        throw new NotImplementedException();
    }

    private async Task DeleteLessThanFourSongsButtonClick()
    {
        var didDelete = await AlbumDiscoveryService.DeleteAlbumsAsync(_library.ToFileSystemDirectoryInfo(), album => album.Songs?.Count() < 4);

        if (didDelete)
        {
            if (_grid != null)
            {
                await _grid.RefreshDataAsync();
            }

            NotificationService.Notify(NotificationMessageForResult(new OperationResult<bool>
            {
                Data = true
            }, "deleted albums", ToastTime));
            _selectedAlbums.Clear();
        }
    }

    private async Task DeleteLessThan10MinutesButtonClick()
    {
        var lessThanDurationMs = TimeSpan.FromMinutes(10).TotalMilliseconds;
        var didDelete = await AlbumDiscoveryService.DeleteAlbumsAsync(_library.ToFileSystemDirectoryInfo(), album => album.TotalDuration() < lessThanDurationMs);

        if (didDelete)
        {
            if (_grid != null)
            {
                await _grid.RefreshDataAsync();
            }

            NotificationService.Notify(NotificationMessageForResult(new OperationResult<bool>
            {
                Data = true
            }, "deleted albums", ToastTime));
            _selectedAlbums.Clear();
        }
    }

    private async Task DeleteAlbumsByStatus(string key)
    {
        var didDelete = await AlbumDiscoveryService.DeleteAlbumsAsync(_library.ToFileSystemDirectoryInfo(), album => album.StatusReasons.ToString() == key);

        if (didDelete)
        {
            if (_grid != null)
            {
                await _grid.RefreshDataAsync();
            }

            NotificationService.Notify(NotificationMessageForResult(new OperationResult<bool>
            {
                Data = true
            }, "deleted albums", ToastTime));
            _selectedAlbums.Clear();
        }
    }

}
