@page "/"

@using Melodee.Common.Data.Models
@using Melodee.Common.Enums
@using Melodee.Common.Models.Collection
@using TextStyle = Radzen.Blazor.TextStyle
@inherits MelodeeComponentBase

@inject StatisticsService StatisticsService
@inject UserService UserService
@inject ArtistService ArtistService
@inject AlbumService AlbumService
@inject IMelodeeConfigurationFactory ConfigurationFactory

<PageTitle>Dashboard</PageTitle>

<RadzenStack>
    @if (_userPins.Length > 0)
    {
        <RadzenRow>
            <RadzenPanel AllowCollapse="true">
                <HeaderTemplate>
                    <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                        <RadzenIcon Icon="keep" class="rz-me-1"/>
                        Your pins
                    </RadzenText>
                </HeaderTemplate>
                <ChildContent>
                    <RadzenStack
                        Orientation="Orientation.Horizontal"
                        Wrap="FlexWrap.Wrap"
                        JustifyContent="JustifyContent.Left"
                        class="rz-p-2"
                        Gap="8px">
                        @foreach (var pin in _userPins)
                        {
                            <UserPinCardComponent UserPin="@pin"/>
                        }
                    </RadzenStack>
                </ChildContent>
            </RadzenPanel>
        </RadzenRow>
    }
    <RadzenRow>
        <RadzenPanel class="hide-below-1024" AllowCollapse="true">
            <HeaderTemplate>
                <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-align-items-center rz-m-0">
                    <RadzenIcon Icon="monitoring" class="rz-me-1"/>
                    Statistics
                </RadzenText>
            </HeaderTemplate>
            <ChildContent>
                <RadzenStack
                    Orientation="Orientation.Horizontal"
                    Wrap="FlexWrap.Wrap"
                    JustifyContent="JustifyContent.Left"
                    class="rz-p-2"
                    Gap="8px">
                    @foreach (var statistic in _statistics)
                    {
                        <RadzenBadge BadgeStyle="BadgeStyle.Info" Shade="Shade.Dark" Style="min-width: 200px;">
                            <RadzenIcon Icon="@statistic.Icon"/>
                            <div style="width:120px;display:inline-block;text-transform:none;text-align:left;">
                                @($"{statistic.Title}")
                            </div>
                            <div style="width:100px;display:inline-block;text-align:right;" title="@statistic.Message">
                                @if (statistic.Type == StatisticType.Count)
                                {
                                    @($"{((int)statistic.Data).ToStringPadLeft(ViewConstants.StatisticNumberPadLength)}")
                                }
                                else
                                {
                                    @statistic.Data
                                }
                            </div>
                        </RadzenBadge>
                    }
                </RadzenStack>
            </ChildContent>
        </RadzenPanel>
    </RadzenRow>
    <RadzenPanel AllowCollapse="true">
        <HeaderTemplate>
            <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-m-0">
                <RadzenIcon Icon="artist" class="rz-me-1"/>
                Most recently added artists
            </RadzenText>
        </HeaderTemplate>
        <ChildContent>
            <RadzenStack
                Orientation="Orientation.Horizontal"
                Wrap="FlexWrap.Wrap"
                JustifyContent="JustifyContent.Left"
                class="rz-p-1"
                Gap="10px">
                @foreach (var artist in _latestArtists)
                {
                    <ArtistDataInfoCardComponent Artist="@artist"/>
                }
            </RadzenStack>
        </ChildContent>
    </RadzenPanel>
    <RadzenPanel AllowCollapse="true">
        <HeaderTemplate>
            <RadzenText TextStyle="TextStyle.H6" class="rz-display-flex rz-m-0">
                <RadzenIcon Icon="album" class="rz-me-1"/>
                Most recently added albums
            </RadzenText>
        </HeaderTemplate>
        <ChildContent>
            <RadzenStack
                Orientation="Orientation.Horizontal"
                Wrap="FlexWrap.Wrap"
                JustifyContent="JustifyContent.Left"
                class="rz-p-1"
                Gap="10px">
                @foreach (var album in _latestAlbums)
                {
                    <AlbumDataInfoCardComponent Album="@album"/>
                }
            </RadzenStack>
        </ChildContent>
    </RadzenPanel>
</RadzenStack>

@code {

    Statistic[] _statistics = [];

    AlbumDataInfo[] _latestAlbums = [];
    ArtistDataInfo[] _latestArtists = [];
    UserPin[] _userPins = [];

    private short _latestPageSize;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        var configuration = await ConfigurationFactory.GetConfigurationAsync();
        _latestPageSize = configuration.GetValue<short?>(SettingRegistry.DefaultsDashboardLatestPageSize) ?? configuration.GetValue<short?>(SettingRegistry.DefaultsPageSize) ?? 50;

        var statResult = await StatisticsService.GetStatisticsAsync();
        _statistics = statResult.Data;

        var albumLatestResult = await AlbumService.ListAsync(new PagedRequest
        {
            PageSize = _latestPageSize,
            OrderBy = new Dictionary<string, string>
            {
                { nameof(AlbumDataInfo.CreatedAt), PagedRequest.OrderDescDirection }
            }
        });
        _latestAlbums = albumLatestResult.Data.ToArray();

        var artistLatestResult = await ArtistService.ListAsync(new PagedRequest
        {
            PageSize = _latestPageSize,
            OrderBy = new Dictionary<string, string>
            {
                { nameof(ArtistDataInfo.CreatedAt), PagedRequest.OrderDescDirection }
            }
        });
        _latestArtists = artistLatestResult.Data.ToArray();

        var userResult = await UserService.GetAsync(CurrentUser?.UserId() ?? 0);
        if (userResult is { IsSuccess: true, Data: not null })
        {
            _userPins = userResult.Data.Pins.ToArray();
        }
    }

}
